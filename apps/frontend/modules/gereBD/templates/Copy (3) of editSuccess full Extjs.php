<?php
// auto-generated by sfPropelCrud
// date: 2008/01/08 10:27:03
?>
<?php use_helper('Object') ?>
<?php use_helper('Validation') ?>
<?php use_helper('Javascript') ?>
<?php use_helper('sfExtjs2'); //(Probably OBSOLETE, I don't think this is necessary anymore) ?>  
<?php use_javascript('/javascript/FileUploadField.js') ?>

<div class="roundedcornr_box_719771">
   <div class="roundedcornr_top_719771"><div></div></div>
      <div class="roundedcornr_content_719771">
<?php if ($bd->getId()): ?>
Modification de BD
<?php else: ?>
Saisie de BD
<?php endif; ?>
      </div>
   <div class="roundedcornr_bottom_719771"><div></div></div>
</div>	

<div id="msg" style="visibility: hidden"></div>
<div id="tabs"></div>

<?php

  $private = array ( );
  $public = array ( );

  $sfExtjs2Plugin = new sfExtjs2Plugin( array ('theme' => 'gray' ), array('css' => '/css/main.css'));
  $sfExtjs2Plugin->load();
  $sfExtjs2Plugin->begin();

  // **************************************
  // Application
  // **************************************

  
   // Create the data store BD
   
  $private ['ds'] = $sfExtjs2Plugin->JsonStore (
    array (
      'url'     => '/frontend_dev.php/gereBD/Json',
      'id'      =>  'id',
      'totalProperty' => 'total',
      'root'      => 'data',
      'fields'    => array(
        array(
          'name'  => 'id'
        ),
        array(
          'name'  => 'talbum'
        ),
        array(
          'name'  => 'commentaire'
        ),
        array(
          'name'  => 'dateParu'
        ),
        array(
          'name'  => 'depotLegal'
        ),
        array(
          'name'  => 'histoire'
        ),
        array(
          'name'  => 'integrale'
        ),
        array(
          'name'  => 'ISBN'
        ),
        array(
          'name'  => 'ISSN'
        ),
        array(
          'name'  => 'nbrePage'
        ),
        array(
          'name'  => 'photo1'
        ),
        array(
          'name'  => 'imgPhoto1'
        ),
        array(
          'name'  => 'photo2'
        ),
        array(
          'name'  => 'imgPhoto2'
        ),
        array(
          'name'  => 'proprietaire'
        ),
       ),
      'sortInfo'  => array(
        'field'   => 'talbum',
        'direction' => 'ASC'
      ),
      'remoteSort'=> true
    )
  );
  
// Create the data store series pour combo

$cboSerieStore = $sfExtjs2Plugin->JsonStore (
	array (
      'url'     => '/frontend_dev.php/gereBD/CboListSerie',
	  'id'      =>  'id',
      'totalProperty' => 'totalCount',
	'root'      => 'series',
	'fields'    => array(
        array(
          'name'=> 'search_idSerie', 'mapping' => 'search_idSerie'
                ),
        array(
          'name'=> 'search_nomSerie', 'mapping' => 'search_nomSerie'
                ),
                ),
           )  );
  
$private['creerCboSeriesStore'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerCboSeriesStore', 'source' => 'return '.$sfExtjs2Plugin->asVar($cboSerieStore))); 

// Create the data store genre pour combo

$cboGenreStore = $sfExtjs2Plugin->JsonStore (
	array (
      'url'     => '/frontend_dev.php/gereBD/CboListGenre',
	  'id'      =>  'id',
      'totalProperty' => 'totalCount',
	  'root'      => 'genres',
	  'fields'    => array(
        array(
          'name'=> 'search_idGenre', 'mapping' => 'search_idGenre'
                ),
        array(
          'name'=> 'search_nomGenre', 'mapping' => 'search_nomGenre'
                ),
                ),
           )  );
  
$private['creerCboGenresStore'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerCboGenresStore', 'source' => 'return '.$sfExtjs2Plugin->asVar($cboGenreStore))); 

// Create the data store editeur pour combo

$cboEditeurStore = $sfExtjs2Plugin->JsonStore (
	array (
      'url'     => '/frontend_dev.php/gereBD/CboListEditeur',
	  'id'      =>  'id',
      'totalProperty' => 'totalCount',
	  'root'      => 'editeurs',
	  'fields'    => array(
        array(
          'name'=> 'search_idEditeur', 'mapping' => 'search_idEditeur'
                ),
        array(
          'name'=> 'search_nomEditeur', 'mapping' => 'search_nomEditeur'
                ),
                ),
           )  );
  
$private['creerCboEditeursStore'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerCboEditeursStore', 'source' => 'return '.$sfExtjs2Plugin->asVar($cboEditeurStore))); 

// Create the data store auteur pour combo

$cboAuteursStore = $sfExtjs2Plugin->JsonStore (
	array (
      'url'     => '/frontend_dev.php/gereBD/CboListAuteur',
	  'id'      =>  'id',
      'totalProperty' => 'totalCount',
	  'root'      => 'auteurs',
	  'fields'    => array(
        array(
          'name'=> 'search_idAuteur', 'mapping' => 'search_idAuteur'
                ),
        array(
          'name'=> 'search_nomAuteur', 'mapping' => 'search_nomAuteur'
                ),
        array(
          'name'=> 'search_scenariste', 'mapping' => 'search_scenariste'
                ),
        array(
          'name'=> 'search_coloriste', 'mapping' => 'search_coloriste'
                ),
        array(
          'name'=> 'search_dessinateur', 'mapping' => 'search_dessinateur'
                ),
                ),
           )  );
  
$private['creerCboAuteursStore'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerCboAuteursStore', 'source' => 'return '.$sfExtjs2Plugin->asVar($cboAuteursStore))); 

// Create the data store pays pour combo

$cboPaysStore = $sfExtjs2Plugin->JsonStore (
	array (
      'url'     => '/frontend_dev.php/gereBD/CboListPays',
	  'id'      =>  'search_idPays',
      'totalProperty' => 'totalCount',
	  'root'      => 'pays',
	  'fields'    => array(
        array(
          'name'=> 'search_idPays', 'mapping' => 'search_idPays'
                ),
        array(
          'name'=> 'search_nomPays', 'mapping' => 'search_nomPays'
                ),
                ),
           )  );
  
$private['creerCboPaysStore'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerCboPaysStore', 'source' => 'return '.$sfExtjs2Plugin->asVar($cboPaysStore))); 

// Create the data store series pour liste des séries

  $private ['dsSeries'] = $sfExtjs2Plugin->JsonStore (
    array (
      'url'     => '/frontend_dev.php/gereBD/JsonListeSeries',
      'id'      =>  'id',
      'totalProperty' => 'totalListeSeries',
      'root'      => 'listeSeries',
      'fields'    => array(
        array(
          'name'  => 'id'
        ),
        array(
          'name'  => 'nom'
        ),
        array(
          'name'  => 'histoire'
        ),
        array(
          'name'  => 'commentaire'
        ),
        array(
          'name'  => 'photo1'
        ),
        array(
          'name'  => 'imgPhoto1'
        ),
        array(
          'name'  => 'photo2'
        ),
        array(
          'name'  => 'imgPhoto2'
        ),
        array(
          'name'  => 'siteWeb1'
        ),
        array(
          'name'  => 'siteWeb2'
        ),
        array(
          'name'  => 'proprietaire'
        ),
        ),
      'sortInfo'  => array(
        'field'   => 'nom',
        'direction' => 'ASC'
      ),
      'remoteSort'=> true
    )
  );
  
   
/*// Création du bouton de liste des séries
$private['btListeSeries'] = $sfExtjs2Plugin->Button(array
    (
      'text'=>'Series',
      'renderTo' => 'tabs',
      'handler' => $sfExtjs2Plugin->asVar('addTabListeSeries')
    ));
*/    
// Création du bouton d'ajout de série
$btAddSerie = $sfExtjs2Plugin->Button(array
    (
      'text'=>'Créer Série',
      'handler' => $sfExtjs2Plugin->asVar('createSerie')
    ));    

// Création du bouton d'ajout de série
$btSaveSerie = $sfExtjs2Plugin->Button(array
    (
      'text'=>'Enregistrer',
      'handler' => $sfExtjs2Plugin->asVar('saveSaisieSerie')
    ));    

// Create the data store editeurs pour liste des éditeurs

  $private ['dsEditeurs'] = $sfExtjs2Plugin->JsonStore (
    array (
      'url'     => '/frontend_dev.php/gereBD/JsonListeEditeurs',
      'id'      =>  'id',
      'totalProperty' => 'totalListeEditeurs',
      'root'      => 'listeEditeurs',
      'fields'    => array(
        array(
          'name'  => 'id'
        ),
        array(
          'name'  => 'nom'
        ),
        array(
          'name'  => 'adresse1'
        ),
        array(
          'name'  => 'adresse2'
        ),
        array(
          'name'  => 'cp'
        ),
        array(
          'name'  => 'pays'
        ),
        array(
          'name'  => 'photo1'
        ),
        array(
          'name'  => 'imgPhoto1'
        ),
        array(
          'name'  => 'photo2'
        ),
        array(
          'name'  => 'imgPhoto2'
        ),
        array(
          'name'  => 'site'
        ),
        array(
          'name'  => 'tel'
        ),
        array(
          'name'  => 'ville'
        ),
        array(
          'name'  => 'proprietaire'
        ),
        ),
      'sortInfo'  => array(
        'field'   => 'nom',
        'direction' => 'ASC'
      ),
      'remoteSort'=> true
    )
  );
  
  
/*// Création du bouton de liste des editeurs
$private['btListeEditeurs'] = $sfExtjs2Plugin->Button(array
    (
      'text'=>'Editeurs',
      'renderTo' => 'tabs',
      'handler' => $sfExtjs2Plugin->asVar('addTabListeEditeurs')
    ));
*/    
// Création du bouton d'ajout d'éditeur
$btAddEditeur = $sfExtjs2Plugin->Button(array
    (
      'text'=>'Créer Editeur',
      'handler' => $sfExtjs2Plugin->asVar('createEditeur')
    ));    

// Création du bouton d'ajout d'éditeur
$btSaveEditeur = $sfExtjs2Plugin->Button(array
    (
      'text'=>'Enregistrer',
      'handler' => $sfExtjs2Plugin->asVar('saveSaisieEditeur')
    ));    
    
// Create the data store editeurs pour liste des auteurs

  $private ['dsAuteurs'] = $sfExtjs2Plugin->JsonStore (
    array (
      'url'     => '/frontend_dev.php/gereBD/JsonListeAuteurs',
      'id'      =>  'id',
      'totalProperty' => 'totalListeAuteurs',
      'root'      => 'listeAuteurs',
      'fields'    => array(
        array(
          'name'  => 'id'
        ),
        array(
          'name'  => 'nom'
        ),
        array(
          'name'  => 'prenom'
        ),
        array(
          'name'  => 'surnom'
        ),
        array(
          'name'  => 'commentaire'
        ),
        array(
          'name'  => 'lieuNaissance'
        ),
        array(
          'name'  => 'dateNaissance'
        ),
        array(
          'name'  => 'pays'
        ),
        array(
          'name'  => 'scenariste'
        ),
        array(
          'name'  => 'dessinateur'
        ),
        array(
          'name'  => 'coloriste'
        ),
        array(
          'name'  => 'photo1'
        ),
        array(
          'name'  => 'imgPhoto1'
        ),
        array(
          'name'  => 'photo2'
        ),
        array(
          'name'  => 'imgPhoto2'
        ),
        array(
          'name'  => 'web1'
        ),
        array(
          'name'  => 'web2'
        ),
        array(
          'name'  => 'proprietaire'
        ),
        ),
      'sortInfo'  => array(
        'field'   => 'nom',
        'direction' => 'ASC'
      ),
      'remoteSort'=> true
    )
  );
  
  
/*// Création du bouton de liste des editeurs
$private['btListeAuteurs'] = $sfExtjs2Plugin->Button(array
    (
      'text'=>'Auteurs',
      'renderTo' => 'tabs',
      'handler' => $sfExtjs2Plugin->asVar('addTabListeAuteurs')
    ));
*/    
// Création du bouton d'ajout d'éditeur
$btAddAuteur = $sfExtjs2Plugin->Button(array
    (
      'text'=>'Créer Auteur',
      'handler' => $sfExtjs2Plugin->asVar('createAuteur')
    ));    

// Création du bouton d'ajout d'éditeur
$btSaveAuteur = $sfExtjs2Plugin->Button(array
    (
      'text'=>'Enregistrer',
      'handler' => $sfExtjs2Plugin->asVar('saveSaisieAuteur')
    ));    
       
// renderer ligne modifiable ou non
$private['cellROW']  = $sfExtjs2Plugin->asVar('false');
$private['rdrFunc1']  = $sfExtjs2Plugin->asMethod(array('name' => 'rdrModifiable', 'parameters' => 'val, cell', 'source' => "
		cellROW=val;
		cellRenderer(val,cell);
		if(val) {
			return '<img src=\'/images/moderateur.gif\' alt=\'Modérateur\' />';
			}
		else {
			return '<img src=\'/images/utilisateur.gif\' alt=\'Utilisateur\' />';
			}
")); 

$private['rdrFunc2']  = $sfExtjs2Plugin->asMethod(array('name' => 'cellRenderer', 'parameters' => 'val, cell', 'source' => "
		if(cellROW) {
			cell.css = \"moderateur\";
			}
		else {
			cell.css = \"utilisateur\";
			}
		return val;
")); 

$private['rdrFunc3']  = $sfExtjs2Plugin->asMethod(array('name' => 'cellImgRenderer', 'parameters' => 'val, cell', 'source' => "
		if(cellROW) {
			cell.css = \"moderateur\";
			}
		else {
			cell.css = \"utilisateur\";
			}
		if(val==' ') {
			return 'aucune image';
			}
		else {
			return '<img src=\'' + val + '\' alt=\'Utilisateur\' />';
			}
")); 

// Create the column model BD
   
  $private ['cm'] = $sfExtjs2Plugin->ColumnModel (
    array (
      'parameters' => array (
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'id',
            'hidden' => true,
            'dataIndex' => 'id'
          )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'proprietaire',
            'hidden' => false,
            'dataIndex' => 'proprietaire',
          	'width' => 50,
          	'renderer' => $sfExtjs2Plugin->asVar ( 'rdrModifiable' )
          )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'photo1',
            'hidden' => true,
            'dataIndex' => 'photo1'
            )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'imgPhoto1',
            'header' => 'Photo',
            'width' => 170,
            'sortable' => true,
            'dataIndex' => 'imgPhoto1',
          	'renderer' => $sfExtjs2Plugin->asVar ( 'cellImgRenderer' )
            )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'talbum',
            'header' => 'Titre album',
            'width' => 120,
            'sortable' => true,
            'dataIndex' => 'talbum',
          	'renderer' => $sfExtjs2Plugin->asVar ( 'cellRenderer' )
            )
        )
      )
    )
  );
   // Create the selection model album
   
  $private ['smAlbums'] = $sfExtjs2Plugin->RowSelectionModel (
    array (
            'singleSelect'=>true
          )
  ); 
  
   // Create the column model series
   
  $private ['cmSeries'] = $sfExtjs2Plugin->ColumnModel (
    array (
      'parameters' => array (
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'proprietaire',
            'hidden' => false,
            'dataIndex' => 'proprietaire',
          	'width' => 50,
          	'renderer' => $sfExtjs2Plugin->asVar ( 'rdrModifiable' )
          )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'photo1',
            'hidden' => true,
            'dataIndex' => 'photo1'
            )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'imgPhoto1',
            'header' => 'Photo',
            'width' => 170,
            'sortable' => true,
            'dataIndex' => 'imgPhoto1',
          	'renderer' => $sfExtjs2Plugin->asVar ( 'cellImgRenderer' )
            )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'nom',
            'header' => 'Titre serie',
            'width' => 120,
            'sortable' => true,
            'dataIndex' => 'nom',
          	'renderer' => $sfExtjs2Plugin->asVar ( 'cellRenderer' )
            )
        )
      )
    )
  );
  
   // Create the column model editeurs
   
  $private ['cmEditeurs'] = $sfExtjs2Plugin->ColumnModel (
    array (
      'parameters' => array (
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'proprietaire',
            'hidden' => false,
            'dataIndex' => 'proprietaire',
          	'width' => 50,
          	'renderer' => $sfExtjs2Plugin->asVar ( 'rdrModifiable' )
          )
        ),
    	$sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'id',
            'hidden' => true,
            'dataIndex' => 'id'
          )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'photo1',
            'hidden' => true,
            'dataIndex' => 'photo1'
            )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'imgPhoto1',
            'header' => 'Photo',
            'width' => 170,
            'sortable' => true,
            'dataIndex' => 'imgPhoto1',
          	'renderer' => $sfExtjs2Plugin->asVar ( 'cellImgRenderer' )
            )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'nom',
            'header' => 'Editeur',
            'width' => 120,
            'sortable' => true,
            'dataIndex' => 'nom',
          	'renderer' => $sfExtjs2Plugin->asVar ( 'cellRenderer' )
            )
        )
      )
    )
  ); 

   // Create the selection model editeurs
   
  $private ['smEditeurs'] = $sfExtjs2Plugin->RowSelectionModel (
    array (
            'singleSelect'=>true
          )
  ); 
  
   // Create the column model auteurs
   
  $private ['cmAuteurs'] = $sfExtjs2Plugin->ColumnModel (
    array (
      'parameters' => array (
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'proprietaire',
            'hidden' => false,
            'dataIndex' => 'proprietaire',
          	'width' => 50,
          	'renderer' => $sfExtjs2Plugin->asVar ( 'rdrModifiable' )
          )
        ),
    	$sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'id',
            'hidden' => true,
            'dataIndex' => 'id'
          )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'photo1',
            'hidden' => true,
            'dataIndex' => 'photo1'
            )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'imgPhoto1',
            'header' => 'Photo',
            'width' => 170,
            'sortable' => true,
            'dataIndex' => 'imgPhoto1',
          	'renderer' => $sfExtjs2Plugin->asVar ( 'cellImgRenderer' )
            )
        ),
        $sfExtjs2Plugin->asAnonymousClass (
          array (
            'id'=>'nom',
            'header' => 'Auteur',
            'width' => 120,
            'sortable' => true,
            'dataIndex' => 'nom',
          	'renderer' => $sfExtjs2Plugin->asVar ( 'cellRenderer' )
            )
        )
      )
    )
  ); 

   // Create the selection model auteurs
   
  $private ['smAuteurs'] = $sfExtjs2Plugin->RowSelectionModel (
    array (
            'singleSelect'=>true
          )
  ); 
    
// Create the paging toolbar BD
   
  $ptBd = $sfExtjs2Plugin->PagingToolbar (
    array(
      'store'       => $sfExtjs2Plugin->asVar ( 'ds' ),
      'pageSize'      => 8,
    'displayInfo' => true,
    'displayMsg' => 'Affichage des résultats {0} - {1} of {2}',
    'emptyMsg' => 'No results to display'
    )
  );
  
  $ptSeries = $sfExtjs2Plugin->PagingToolbar (
    array(
      'store'       => $sfExtjs2Plugin->asVar ( 'dsSeries' ),
      'pageSize'      => 8,
    'displayInfo' => true,
    'displayMsg' => 'Affichage des résultats {0} - {1} of {2}',
    'emptyMsg' => 'No results to display'
    )
  );
    
  $ptEditeurs = $sfExtjs2Plugin->PagingToolbar (
    array(
      'store'       => $sfExtjs2Plugin->asVar ( 'dsEditeurs' ),
      'pageSize'      => 8,
    'displayInfo' => true,
    'displayMsg' => 'Affichage des résultats {0} - {1} of {2}',
    'emptyMsg' => 'No results to display'
    )
  );
  $ptAuteurs = $sfExtjs2Plugin->PagingToolbar (
    array(
      'store'       => $sfExtjs2Plugin->asVar ( 'dsAuteurs' ),
      'pageSize'      => 8,
    'displayInfo' => true,
    'displayMsg' => 'Affichage des résultats {0} - {1} of {2}',
    'emptyMsg' => 'No results to display'
    )
  );
  
// Création du bouton d'ajout de BD
$btAddBd = $sfExtjs2Plugin->Button(array
    (
      'text'=>'Créer BD',
      'handler' => $sfExtjs2Plugin->asVar('createBd')
    ));    
        
// Création du bouton d'ajout de BD
$btSaveBd = $sfExtjs2Plugin->Button(array
    (
      'text'=>'Enregistrer',
      'handler' => $sfExtjs2Plugin->asVar('saveSaisieBd')
    ));    
  
 // Create the Grid de liste des BD

$gpListeBd = $sfExtjs2Plugin->GridPanel (
    array (
      'id'        => 'gpListeBd',
      'title'       => 'Liste des BD',
      'cm'        => $sfExtjs2Plugin->asVar ( 'cm' ),
      'sm'        => $sfExtjs2Plugin->asVar ( 'smAlbums' ),
      'ds'        => $sfExtjs2Plugin->asVar ( 'ds' ),
      'enableColLock'   => false,
      'loadMask'      => true,
      'autocreate' => true,
      'xtype'      => 'grid',
      'width'       => 600,
      'height'      => 400,
      'frame'       => true,
      'iconCls'       => 'grid-details',
      'autoExpandColumn'  => 'talbum',
      'bbar'        => $sfExtjs2Plugin->asVar ( $ptBd ),
      'buttons' => array($sfExtjs2Plugin->asVar($btAddBd)),
	  'listeners' => array('rowdblclick' => $sfExtjs2Plugin->asVar('editBd'))
    )
  ); 
  
// Create the Grid de liste des Bd
$private['creerGpListeBd'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerGpListeBd', 'source' => 'return '.$sfExtjs2Plugin->asVar($gpListeBd))); 
  
// Déclaration du Grid de liste des Séries
$gpListeSeries = $sfExtjs2Plugin->GridPanel (
    array (
      'id'        => 'gpListeSeries',
      'title'       => 'Liste des Series',
      'cm'        => $sfExtjs2Plugin->asVar ( 'cmSeries' ),
      'store'        => $sfExtjs2Plugin->asVar ( 'dsSeries' ),
      'enableColLock'   => false,
      'loadMask'      => true,
      'autocreate' => true,
      'closable'      => false,
      'xtype'      => 'grid',
      'width'       => 600,
      'height'      => 400,
      'frame'       => true,
      'iconCls'       => 'grid-details',
      'autoExpandColumn'  => 'nom',
      'bbar'        => $sfExtjs2Plugin->asVar ( $ptSeries ),
      'buttons' => array($sfExtjs2Plugin->asVar($btAddSerie)),
	  'listeners' => array('rowdblclick' => $sfExtjs2Plugin->asVar('editSerie'))
    )
  );
  
// Create the Grid de liste des Séries
$private['creerGpListeSeries'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerGpListeSeries', 'source' => 'return '.$sfExtjs2Plugin->asVar($gpListeSeries))); 

// Déclaration du Grid de liste des Editeurs
$gpListeEditeurs = $sfExtjs2Plugin->GridPanel (
    array (
      'id'        => 'gpListeEditeurs',
      'title'       => 'Liste des Editeurs',
      'cm'        => $sfExtjs2Plugin->asVar ( 'cmEditeurs' ),
      'sm'        => $sfExtjs2Plugin->asVar ( 'smEditeurs' ),
      'store'        => $sfExtjs2Plugin->asVar ( 'dsEditeurs' ),
      'enableColLock'   => false,
      'loadMask'      => true,
      'autocreate' => true,
      'closable'      => false,
      'xtype'      => 'grid',
      'width'       => 600,
      'height'      => 400,
      'frame'       => true,
      'iconCls'       => 'grid-details',
      'autoExpandColumn'  => 'nom',
      'bbar'        => $sfExtjs2Plugin->asVar ( $ptEditeurs ),
      'buttons' => array($sfExtjs2Plugin->asVar($btAddEditeur)),
	  'listeners' => array('rowdblclick' => $sfExtjs2Plugin->asVar('editEditeur'))
    )
  );
  
// Create the Grid de liste des Editeurs
$private['creerGpListeEditeurs'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerGpListeEditeurs', 'source' => 'return '.$sfExtjs2Plugin->asVar($gpListeEditeurs))); 

// Déclaration du Grid de liste des Auteurs
$gpListeAuteurs = $sfExtjs2Plugin->GridPanel (
    array (
      'id'        => 'gpListeAuteurs',
      'title'       => 'Liste des Auteurs',
      'cm'        => $sfExtjs2Plugin->asVar ( 'cmAuteurs' ),
      'sm'        => $sfExtjs2Plugin->asVar ( 'smAuteurs' ),
      'store'        => $sfExtjs2Plugin->asVar ( 'dsAuteurs' ),
      'enableColLock'   => false,
      'loadMask'      => true,
      'autocreate' => true,
      'closable'      => false,
      'xtype'      => 'grid',
      'width'       => 600,
      'height'      => 400,
      'frame'       => true,
      'iconCls'       => 'grid-details',
      'autoExpandColumn'  => 'nom',
      'bbar'        => $sfExtjs2Plugin->asVar ( $ptAuteurs ),
      'buttons' => array($sfExtjs2Plugin->asVar($btAddAuteur)),
	  'listeners' => array('rowdblclick' => $sfExtjs2Plugin->asVar('editAuteur'))
    )
  );
  
// Create the Grid de liste des Auteurs
$private['creerGpListeAuteurs'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerGpListeAuteurs', 'source' => 'return '.$sfExtjs2Plugin->asVar($gpListeAuteurs))); 


$private['tabPanel'] = $sfExtjs2Plugin->TabPanel(array
    (
      'id' => 'tabPanel',
      'renderTo' => 'tabs',
      'resizeTabs'=>'true',
      'enableTabScroll'=>'true',
      'autoScroll'=>'true',
      'region'=>'center',
      'margins'=>'0 4 4 0',
      'deferredRender'=>'false',
      'width'=>800,
      'height'=>450,
      'items'=>$sfExtjs2Plugin->asVar('{title: "Liste des BD" ,
			id: "bdListe",
    		iconCls: "tabs"}')
        ));
        
//**********************************
// Formulaire de saisie de BD
//**********************************


    
$bdId = $sfExtjs2Plugin->Hidden(array
(
	'id' => 'bdId',
	'fieldLabel' => 'Id',
	'name' => 'id'
));
$bdTalbum = $sfExtjs2Plugin->TextField(array
(
	'id' => 'bdTalbum',
	'fieldLabel' => 'Titre',
	'name' => 'talbum',
	'width' => 400
));
$bdCommentaire = $sfExtjs2Plugin->HtmlEditor(array
(
	'id' => 'bdCommentaire',
	'fieldLabel' => 'Commentaire',
	'name' => 'commentaire',
	'width' => 400
));
$bdDateParu = $sfExtjs2Plugin->DateField(array
(
	'id' => 'bdDateParu',
	'fieldLabel' => 'Date de parution',
	'name' => 'dateParu',
	'width' => 100,
	'format' => 'd-m-Y'
));
$bdDepotLegal = $sfExtjs2Plugin->DateField(array
(
	'id' => 'bdDepotLegal',
	'fieldLabel' => 'Date de depot legal',
	'name' => 'depotLegal',
	'width' => 100,
	'format' => 'd-m-Y'
));
$bdHistoire = $sfExtjs2Plugin->HtmlEditor(array
(
	'id' => 'bdHistoire',
	'fieldLabel' => 'Histoire',
	'name' => 'histoire',
	'width' => 400
));
$bdIntegrale = $sfExtjs2Plugin->TextField(array
(
	'id' => 'bdIntegrale',
	'fieldLabel' => 'Integrale',
	'name' => 'intergrale',
	'width' => 400
));
$bdISBN = $sfExtjs2Plugin->TextField(array
(
	'id' => 'bdISBN',
	'fieldLabel' => 'ISBN',
	'name' => 'ISBN',
	'width' => 400
));
$bdISSN = $sfExtjs2Plugin->TextField(array
(
	'id' => 'bdISSN',
	'fieldLabel' => 'ISSN',
	'name' => 'ISSN',
	'width' => 400
));
$bdNbrePage = $sfExtjs2Plugin->TextField(array
(
	'id' => 'bdNbrePage',
	'fieldLabel' => 'Nbre pages',
	'name' => 'nbrePage',
	'width' => 50
));

// création de la combo editeur
$private['creerCboEditeurs']  = $sfExtjs2Plugin->asMethod(array('name' => 'creerCboEditeurs', 'source' => "
			var cboEditeursTemplate = new Ext.XTemplate(
			'<tpl for=\".\"><div class=\"search-item\">',
				'<span style=\"font-size:13px; font-weight:bold;\"><span class=\"selectTitle\"><span>{search_nomEditeur}</span></span>',
			'</div></tpl>'
			);
			editeursCboStore = creerCboEditeursStore();

			cbo = new Ext.form.ComboBox({
				fieldLabel: 'Editeurs',
				id:'editeursCbo',
				name:'editeursCbo',
				style:'width:300',
				store: editeursCboStore,
				valueField:'search_idEditeur',
				displayField:'search_nomEditeur',
				hiddenName: 'editeur_id',
		        typeAhead: true,
		        triggerAction: 'all',
				selectOnFocus: true,
				allowBlank: false,
				loadingText: 'Chargement en cours',
				pageSize:5,
				minChars:0,
				itemSelector: 'div.search-item',
				tpl: cboEditeursTemplate,
				listeners: {
					select: updateCboEditeurs
				}
});
		return cbo;
")); 
	
// Création de l'action pour la modification de la combo
$private['fnUpdateCboEditeurs'] = $sfExtjs2Plugin->asMethod(array('parameters' => 'combo, record, index', 'name' => 'updateCboEditeurs',  'source' => "
						combo.setValue(record.data.search_idEditeur);
						combo.collapse();
	")); 

// création de la combo auteur
$private['creerCboAuteurs']  = $sfExtjs2Plugin->asMethod(array('name' => 'creerCboAuteurs', 'parameters' => 'role', 'source' => "
			var cboAuteursTemplate = new Ext.XTemplate(
			'<tpl for=\".\"><div class=\"search-item\">',
				'<span style=\"font-size:13px; font-weight:bold;\"><span class=\"selectTitle\"><span>{search_nomAuteur}</span></span>',
			'</div></tpl>'
			);
			auteursCboStore = creerCboAuteursStore();
			
			nom = role+'Cbo';
			cbo = new Ext.form.ComboBox({
				fieldLabel: role,
				id: nom,
				name: nom,
				style:'width:300',
				store: auteursCboStore,
				valueField:'search_idAuteur',
				displayField:'search_nomAuteur',
				hiddenName: role,
		        typeAhead: true,
		        triggerAction: 'all',
		        lastQuery:'',
		        selectOnFocus: true,
				allowBlank: false,
				loadingText: 'Chargement en cours',
				pageSize:5,
				minChars:0,
				itemSelector: 'div.search-item',
				tpl: cboAuteursTemplate,
				listeners: {
					select: updateCboAuteurs
				}
});
		return cbo;
")); 
	
// Création de l'action pour la modification de la combo
$private['fnUpdateCboAuteurs'] = $sfExtjs2Plugin->asMethod(array('parameters' => 'combo, record, index', 'name' => 'updateCboAuteurs',  'source' => "
						combo.setValue(record.data.search_idAuteur);
						combo.collapse();
	")); 
// création de la combo genre
$private['creerCboGenres']  = $sfExtjs2Plugin->asMethod(array('name' => 'creerCboGenres', 'source' => "
			var cboGenresTemplate = new Ext.XTemplate(
			'<tpl for=\".\"><div class=\"search-item\">',
				'<span style=\"font-size:13px; font-weight:bold;\"><span class=\"selectTitle\"><span>{search_nomGenre}</span></span>',
			'</div></tpl>'
			);
			genresCboStore = creerCboGenresStore();

			cbo = new Ext.form.ComboBox({
				fieldLabel: 'Genre',
				id:'genresCbo',
				name:'genresCbo',
				style:'width:300',
				store: genresCboStore,
				valueField:'search_idGenre',
				displayField:'search_nomGenre',
				hiddenName: 'genre_id',
		        typeAhead: true,
		        triggerAction: 'all',
				selectOnFocus: true,
				allowBlank: false,
				loadingText: 'Chargement en cours',
				pageSize:5,
				minChars:0,
				itemSelector: 'div.search-item',
				tpl: cboGenresTemplate,
				listeners: {
					select: updateCboGenres
				}
});
		return cbo;
")); 
	
// Création de l'action pour la modification de la combo
$private['fnUpdateCboGenres'] = $sfExtjs2Plugin->asMethod(array('parameters' => 'combo, record, index', 'name' => 'updateCboGenres',  'source' => "
						combo.setValue(record.data.search_idGenre);
						combo.collapse();
	")); 

// création de la combo séries
$private['creerCboSeries']  = $sfExtjs2Plugin->asMethod(array('name' => 'creerCboSeries', 'source' => "
			var cboSeriesTemplate = new Ext.XTemplate(
			'<tpl for=\".\"><div class=\"search-item\">',
				'<span style=\"font-size:13px; font-weight:bold;\"><span class=\"selectTitle\"><span>{search_nomSerie}</span></span>',
			'</div></tpl>'
			);
			seriesCboStore = creerCboSeriesStore();

			cbo = new Ext.form.ComboBox({
				fieldLabel: 'Serie',
				id:'seriesCbo',
				name:'seriesCbo',
				style:'width:300',
				store: seriesCboStore,
				valueField:'search_idSerie',
				displayField:'search_nomSerie',
				hiddenName: 'serie_id',
		        typeAhead: true,
		        triggerAction: 'all',
				selectOnFocus: true,
				allowBlank: false,
				loadingText: 'Chargement en cours',
				pageSize:5,
				minChars:0,
				itemSelector: 'div.search-item',
				tpl: cboSeriesTemplate,
				listeners: {
					select: updateCboSeries
				}
});
		return cbo;
")); 
	
// Création de l'action pour la modification de la combo
$private['fnUpdateCboSeries'] = $sfExtjs2Plugin->asMethod(array('parameters' => 'combo, record, index', 'name' => 'updateCboSeries',  'source' => "
						combo.setValue(record.data.search_idSerie);
						combo.collapse();
	")); 

// Déclaration du formulaire de saisie des BD
$formBd = $sfExtjs2Plugin->FormPanel(array
(
	'id'        	=> 'formBd',
	'fileUpload' => true,
    'title'       	=> 'Saisie de BD',
	'frame' => true,
	'width' => 650,
	'autoHeight' => true,
    'items' 		=> array( 
$sfExtjs2Plugin->asVar ( $bdId ), 
$sfExtjs2Plugin->asVar ( $bdTalbum ), 
$sfExtjs2Plugin->asVar ( $bdCommentaire ), 
$sfExtjs2Plugin->asVar ( $bdDateParu ),
$sfExtjs2Plugin->asVar ( $bdDepotLegal ),
$sfExtjs2Plugin->asVar ( $bdHistoire ),
$sfExtjs2Plugin->asVar ( $bdIntegrale ),
$sfExtjs2Plugin->asVar ( $bdISBN ),
$sfExtjs2Plugin->asVar ( $bdISSN ),
$sfExtjs2Plugin->asVar ( $bdNbrePage ),
$sfExtjs2Plugin->asVar("
{
            xtype: 'fileuploadfield',
            id: 'bdPhoto1',
            emptyText: 'Select an image',
            fieldLabel: 'Photo principale:',
            name: 'photo1',
            buttonText: 'Parourir...',
            buttonCfg: {
            	iconCls: 'upload-icon'
            }
			}
    		"),
$sfExtjs2Plugin->asVar("
{
            xtype: 'fileuploadfield',
            id: 'bdPhoto2',
            emptyText: 'Select an image',
            fieldLabel: 'Photo autre:',
            name: 'photo2',
            buttonText: 'Parourir...',
            buttonCfg: {
            	iconCls: 'upload-icon'
            }
			}
    		")
),
    'buttons' => array( $sfExtjs2Plugin->asVar ($btSaveBd))
));

// Create du formulaire de saisie des BD
$private['creerFmSaisieBd'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerFmSaisieBd', 'source' => 'return '.$sfExtjs2Plugin->asVar($formBd))); 
// Création de l'action pour le bouton
$private['addTabInitial'] = $sfExtjs2Plugin->asMethod(array('name' => 'addTabInitial', 'source' => '
	tabPanel.add({title: "Tab 1",
			id: "tabInitial",
	iconCls: "tabs",
	html: "A simple tab"
});
	')); 

// Création de l'action pour le bouton
$private['addTabListeBd'] = $sfExtjs2Plugin->asMethod(array('name' => 'addTabListeBd', 'source' => '
	gridPanel = creerGpListeBd();
	tabPanel.add({title: "Liste des BD" ,
			id: "bdListe",
    		iconCls: "tabs",
            items: [gridPanel]});
    ds.load({params:{start: 0, limit: 8}, callback: function(){tabPanel.setActiveTab("bdListe");tabPanel.doLayout();}});
	')); 

// Création de l'action pour le bouton de sauvegarde de bd

$private['saveSaisieBd'] = $sfExtjs2Plugin->asMethod(array('name' => 'saveSaisieBd', 'source' => '
		if (fmBD.getForm().isValid()) {
		fmBD.getForm().submit({
		url: "/frontend_dev.php/gereBD/UpdateBd",
		method: "POST",
		reset: false,
		waitMsg:"Saving...",
		    success: function(form, action) {
				obj = Ext.util.JSON.decode(action.response.responseText);
				var message = obj.msg.reason;		//on recherche le message que l\'on souhaite afficher
				Ext.MessageBox.alert("Enregistrement réussit", message);		//msgbox affichant le message de connexion, puis redirige l\'utilisateur s\'il clique sur ok        
				ds.reload();
				tabPanel.remove(tabPanel.getActiveTab());
		    	},
		    failure: function(form, action) {
		        switch (action.failureType) {
		            case Ext.form.Action.CLIENT_INVALID:
		                Ext.Msg.alert("Failure", "Form fields may not be submitted with invalid values");
		                break;
		            case Ext.form.Action.CONNECT_FAILURE:
		                Ext.Msg.alert("Failure", "Ajax communication failed");
		                break;
		            case Ext.form.Action.SERVER_INVALID:
		               Ext.Msg.alert("Failure", action.result.msg);
		       }
		    }
		});
}  else {
		               Ext.Msg.alert("INVALIDE", "Formulaire invalide");

}	
')); 
// Création de l'action pour la modification de BD
$private['fnEditBd'] = $sfExtjs2Plugin->asMethod(array('parameters' => 'grid, rowIndex, e', 'name' => 'editBd',  'source' => '
    var selections = grid.selModel.getSelections();
if (selections[0].json.proprietaire) {
	fmBD = creerFmSaisieBd();
	cboSerie = creerCboSeries();
	fmBD.add(cboSerie);
	cboGenre = creerCboGenres();
	fmBD.add(cboGenre);
	cboEditeur = creerCboEditeurs();
	fmBD.add(cboEditeur);
	cboScenariste = creerCboAuteurs("scenariste");
	fmBD.add(cboScenariste);
	cboColoriste = creerCboAuteurs("coloriste");
	fmBD.add(cboColoriste);
	cboDessinateur = creerCboAuteurs("dessinateur");
	fmBD.add(cboDessinateur);
	cboScenariste.store.load({params:{start: 0, limit: 999}, callback: function(){
	cboColoriste.store.load({params:{start: 0, limit: 999}, callback: function(){
	cboDessinateur.store.load({params:{start: 0, limit: 999}, callback: function(){
	cboEditeur.store.load({params:{start: 0, limit: 8}, callback: function(){
	cboSerie.store.load({params:{start: 0, limit: 8}, callback: function(){
    cboGenre.store.load({params:{start: 0, limit: 8}, callback: function(){
    cboScenariste.store.filter("search_scenariste", 1);
    cboColoriste.store.filter("search_coloriste", 1);
    cboDessinateur.store.filter("search_dessinateur", 1);
    fmBD.getComponent("bdId").setValue(selections[0].json.id); 
	fmBD.getComponent("bdTalbum").setValue(selections[0].json.talbum); 
	fmBD.getComponent("bdCommentaire").setValue(selections[0].json.commentaire); 
	fmBD.getComponent("bdDateParu").setValue(selections[0].json.dateParu); 
	fmBD.getComponent("bdDepotLegal").setValue(selections[0].json.depotLegal); 
	fmBD.getComponent("bdHistoire").setValue(selections[0].json.histoire); 
	fmBD.getComponent("bdIntegrale").setValue(selections[0].json.integrale); 
	fmBD.getComponent("bdISBN").setValue(selections[0].json.ISBN); 
	fmBD.getComponent("bdISSN").setValue(selections[0].json.ISSN); 
	fmBD.getComponent("bdNbrePage").setValue(selections[0].json.nbrePage); 
	fmBD.getComponent("scenaristeCbo").setValue(selections[0].json.scenariste); 
	fmBD.getComponent("coloristeCbo").setValue(selections[0].json.coloriste); 
	fmBD.getComponent("dessinateurCbo").setValue(selections[0].json.dessinateur); 
	fmBD.getComponent("editeursCbo").setValue(selections[0].json.editeur); 
	fmBD.getComponent("genresCbo").setValue(selections[0].json.genre); 
	fmBD.getComponent("seriesCbo").setValue(selections[0].json.serie); 
	fmBD.getComponent("bdPhoto1").setValue(selections[0].json.photo1); 
	fmBD.getComponent("bdPhoto2").setValue(selections[0].json.photo2); 
    tabPanel.add({title: "Modification de BD" ,
			id: "bdSaisie",
            iconCls: "tabs",
            items: [fmBD],
            closable:true});	
    tabPanel.setActiveTab("bdSaisie");
    tabPanel.doLayout();
	}})
	}})
	}})
	}})
	}})
	}})
	}
	')); 
// Création de l'action pour la création de BD
$private['fnCreateBd'] = $sfExtjs2Plugin->asMethod(array( 'name' => 'createBd',  'source' => '
	fmBD = creerFmSaisieBd();
	cboSerie = creerCboSeries();
	fmBD.add(cboSerie);
	cboGenre = creerCboGenres();
	fmBD.add(cboGenre);
	cboEditeur = creerCboEditeurs();
	fmBD.add(cboEditeur);
	cboScenariste = creerCboAuteurs("scenariste");
	fmBD.add(cboScenariste);
	cboColoriste = creerCboAuteurs("coloriste");
	fmBD.add(cboColoriste);
	cboDessinateur = creerCboAuteurs("dessinateur");
	fmBD.add(cboDessinateur);
	tabPanel.add({title: "Création de BD" ,
			id: "bdSaisie",
            iconCls: "tabs",
            items: [fmBD],
            closable:true});	   
    tabPanel.setActiveTab("bdSaisie");
    tabPanel.doLayout();
')); 

//**********************************
// Formulaire de saisie de série
//**********************************

$serieId = $sfExtjs2Plugin->Hidden(array
(
	'id' => 'serieId',
	'fieldLabel' => 'Id',
	'name' => 'id'
));
$serieHistoire = $sfExtjs2Plugin->HtmlEditor(array
(
	'id' => 'serieHistoire',
	'fieldLabel' => 'Histoire',
	'name' => 'histoire',
	'width' => 400
));
$serieCommentaire = $sfExtjs2Plugin->HtmlEditor(array
(
	'id' => 'serieCommentaire',
	'fieldLabel' => 'Commentaire',
	'name' => 'commentaire',
	'width' => 400
));
$serieNom = $sfExtjs2Plugin->TextField(array
(
	'id' => 'serieNom',
	'fieldLabel' => 'Nom',
	'name' => 'nom',
	'width' => 400
));
$serieSiteWeb1 = $sfExtjs2Plugin->TextField(array
(
	'id' => 'serieSiteWeb1',
	'fieldLabel' => 'Site web principal',
	'name' => 'siteWeb1',
	'width' => 400
));
$serieSiteWeb2 = $sfExtjs2Plugin->TextField(array
(
	'id' => 'serieSiteWeb2',
	'fieldLabel' => 'Site web autre',
	'name' => 'siteWeb2',
	'width' => 400
));

// Déclaration du formulaire de saisie des Séries
$formSerie = $sfExtjs2Plugin->FormPanel(array
(
	'id'        	=> 'formSerie',
    'title'       	=> 'Saisie de Serie',
	'fileUpload' => true,
	'frame' => true,
	'width' => 650,
	'autoHeight' => true,
    'items' 		=> array( 
$sfExtjs2Plugin->asVar ( $serieId ), 
$sfExtjs2Plugin->asVar ( $serieNom ), 
$sfExtjs2Plugin->asVar ( $serieHistoire ),
$sfExtjs2Plugin->asVar ( $serieCommentaire ), 
$sfExtjs2Plugin->asVar ( $serieSiteWeb1 ), 
$sfExtjs2Plugin->asVar ( $serieSiteWeb2 ),
$sfExtjs2Plugin->asVar("
{
            xtype: 'fileuploadfield',
            id: 'seriePhoto1',
            emptyText: 'Select an image',
            fieldLabel: 'Photo principale:',
            name: 'photo1',
            buttonText: 'Parourir...',
            buttonCfg: {
            	iconCls: 'upload-icon'
            }
			}
    		"),
$sfExtjs2Plugin->asVar("
{
            xtype: 'fileuploadfield',
            id: 'seriePhoto2',
            emptyText: 'Select an image',
            fieldLabel: 'Photo autre:',
            name: 'photo2',
            buttonText: 'Parourir...',
            buttonCfg: {
            	iconCls: 'upload-icon'
            }
			}
    		")
),
    'buttons' => array( $sfExtjs2Plugin->asVar ($btSaveSerie))
));
// Create du formulaire de saisie des Séries
$private['creerFmSaisieSeries'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerFmSaisieSeries', 'source' => 'return '.$sfExtjs2Plugin->asVar($formSerie))); 


// Création de l'action pour le bouton
$private['addTabListeSeries'] = $sfExtjs2Plugin->asMethod(array('name' => 'addTabListeSeries', 'source' => '
	gp = creerGpListeSeries();
	tabPanel.add({title: "Liste des séries " ,
			id: "serieListe",
            iconCls: "tabs",
            items: [gp],
            closable:false});	   
    dsSeries.load({params:{start: 0, limit: 8}, callback: function(){tabPanel.doLayout();}});
	')); 

// Création de l'action pour le bouton de sauvegarde de série
$private['saveSaisieSerie'] = $sfExtjs2Plugin->asMethod(array('name' => 'saveSaisieSerie', 'source' => '
		if (fm.getForm().isValid()) {
		fm.getForm().submit({
		url: "/frontend_dev.php/gereBD/UpdateSerie",
		method: "POST",
		reset: false,
		waitMsg:"Saving...",
		    success: function(form, action) {
				obj = Ext.util.JSON.decode(action.response.responseText);
				var message = obj.msg.reason;		//on recherche le message que l\'on souhaite afficher
				Ext.MessageBox.alert("Enregistrement réussit", message);		//msgbox affichant le message de connexion, puis redirige l\'utilisateur s\'il clique sur ok        
				dsSeries.reload();
				tabPanel.remove(tabPanel.getActiveTab());
		    	},
		    failure: function(form, action) {
		        switch (action.failureType) {
		            case Ext.form.Action.CLIENT_INVALID:
		                Ext.Msg.alert("Failure", "Form fields may not be submitted with invalid values");
		                break;
		            case Ext.form.Action.CONNECT_FAILURE:
		                Ext.Msg.alert("Failure", "Ajax communication failed");
		                break;
		            case Ext.form.Action.SERVER_INVALID:
		               Ext.Msg.alert("Failure", action.result.msg);
		       }
		    }
		});
}  else {
		               Ext.Msg.alert("INVALIDE", "Formulaire invalide");

}	
')); 
// Création de l'action pour la modification de série
$private['fnEditSerie'] = $sfExtjs2Plugin->asMethod(array('parameters' => 'grid, rowIndex, e', 'name' => 'editSerie',  'source' => '
if (dsSeries.getAt(rowIndex).data.proprietaire) {
	fm = creerFmSaisieSeries();
	tabPanel.add({title: "Modification de série" ,
			id: "serieSaisie",
            iconCls: "tabs",
            items: [fm],
            closable:true});	   
    tabPanel.setActiveTab("serieSaisie");
    tabPanel.doLayout();
	fm.getComponent("serieId").setValue(dsSeries.getAt(rowIndex).data.id); 
	fm.getComponent("serieNom").setValue(dsSeries.getAt(rowIndex).data.nom); 
	fm.getComponent("serieHistoire").setValue(dsSeries.getAt(rowIndex).data.histoire); 
	fm.getComponent("serieCommentaire").setValue(dsSeries.getAt(rowIndex).data.commentaire); 
	fm.getComponent("seriePhoto1").setValue(dsSeries.getAt(rowIndex).data.photo1); 
	fm.getComponent("seriePhoto2").setValue(dsSeries.getAt(rowIndex).data.photo2); 
	fm.getComponent("serieSiteWeb1").setValue(dsSeries.getAt(rowIndex).data.siteWeb1); 
	fm.getComponent("serieSiteWeb2").setValue(dsSeries.getAt(rowIndex).data.siteWeb2); 
}
')); 
// Création de l'action pour la création de série
$private['fnCreateSerie'] = $sfExtjs2Plugin->asMethod(array( 'name' => 'createSerie',  'source' => '
	fm = creerFmSaisieSeries();
	tabPanel.add({title: "Création de série" ,
			id: "serieSaisie",
            iconCls: "tabs",
            items: [fm],
            closable:true});	   
    tabPanel.setActiveTab("serieSaisie");
    tabPanel.doLayout();
')); 

//**********************************
// Formulaire de saisie d'éditeur
//**********************************

$editeurId = $sfExtjs2Plugin->TextField(array
(
	'id' => 'editeurId',
	'fieldLabel' => 'Id',
	'name' => 'id'
));
$editeurNom = $sfExtjs2Plugin->TextField(array
(
	'id' => 'editeurNom',
	'fieldLabel' => 'Nom',
	'name' => 'nom',
	'width' => 400
));
$editeurAdresse1 = $sfExtjs2Plugin->TextField(array
(
	'id' => 'editeurAdresse1',
	'fieldLabel' => 'Adresse1',
	'name' => 'adresse1',
	'width' => 400
));
$editeurAdresse2 = $sfExtjs2Plugin->TextField(array
(
	'id' => 'editeurAdresse2',
	'fieldLabel' => 'Adresse2',
	'name' => 'adresse2',
	'width' => 400
));
$editeurCP = $sfExtjs2Plugin->TextField(array
(
	'id' => 'editeurCP',
	'fieldLabel' => 'CP',
	'name' => 'cp',
	'width' => 50
));
$editeurSite = $sfExtjs2Plugin->TextField(array
(
	'id' => 'editeurSite',
	'fieldLabel' => 'Site web',
	'name' => 'site',
	'width' => 400
));
$editeurTel = $sfExtjs2Plugin->TextField(array
(
	'id' => 'editeurTel',
	'fieldLabel' => 'Téléphone',
	'name' => 'tel',
	'width' => 100
));
$editeurVille = $sfExtjs2Plugin->TextField(array
(
	'id' => 'editeurVille',
	'fieldLabel' => 'Ville',
	'name' => 'ville',
	'width' => 400
));
// création de la combo pays
$private['creerCboPays']  = $sfExtjs2Plugin->asMethod(array('name' => 'creerCboPays', 'source' => "
			var cboPaysTemplate = new Ext.XTemplate(
			'<tpl for=\".\"><div class=\"search-item\">',
				'<span style=\"font-size:13px; font-weight:bold;\"><span class=\"selectTitle\"><span>{search_nomPays}</span></span>',
			'</div></tpl>'
			);
			cboPaysStore = creerCboPaysStore();

			cbo = new Ext.form.ComboBox({
				fieldLabel: 'Pays',
				id:'paysCbo',
				name:'paysCbo',
				style:'width:90%',
				store: cboPaysStore,
				valueField:'search_idPays',
				displayField:'search_nomPays',
				hiddenName: 'pays_id',
		        typeAhead: true,
		        triggerAction: 'all',
				selectOnFocus: true,
				allowBlank: false,
				loadingText: 'Chargement en cours',
				pageSize:5,
				minChars:0,
				itemSelector: 'div.search-item',
				tpl: cboPaysTemplate,
				listeners: {
					select: updateCombo
				}
});
		return cbo;
")); 
	
// Création de l'action pour la modification de la combo
$private['fnUpdateCombo'] = $sfExtjs2Plugin->asMethod(array('parameters' => 'combo, record, index', 'name' => 'updateCombo',  'source' => "
						combo.setValue(record.data.search_idPays);
						combo.collapse();
	")); 
// Déclaration du formulaire de saisie des Editeurs
$formEditeur = $sfExtjs2Plugin->FormPanel(array
(
	'id'        	=> 'formEditeur',
    'title'       	=> 'Saisie des Editeurs',
	'fileUpload' => true,
	'frame' => true,
	'width' => 650,
	'autoHeight' => true,
    'items' 		=> array( 
$sfExtjs2Plugin->asVar ( $editeurId ), 
$sfExtjs2Plugin->asVar ( $editeurNom ), 
$sfExtjs2Plugin->asVar ( $editeurAdresse1 ),
$sfExtjs2Plugin->asVar ( $editeurAdresse2 ), 
$sfExtjs2Plugin->asVar ( $editeurCP ), 
$sfExtjs2Plugin->asVar ( $editeurSite ), 
$sfExtjs2Plugin->asVar ( $editeurTel ),
$sfExtjs2Plugin->asVar ( $editeurVille ),
$sfExtjs2Plugin->asVar("
{
            xtype: 'fileuploadfield',
            id: 'editeurPhoto1',
            emptyText: 'Select an image',
            fieldLabel: 'Photo principale:',
            name: 'photo1',
            buttonText: 'Parourir...',
            buttonCfg: {
            	iconCls: 'upload-icon'
            }
			}
    		"),
$sfExtjs2Plugin->asVar("
{
            xtype: 'fileuploadfield',
            id: 'editeurPhoto2',
            emptyText: 'Select an image',
            fieldLabel: 'Photo autre:',
            name: 'photo2',
            buttonText: 'Parourir...',
            buttonCfg: {
            	iconCls: 'upload-icon'
            }
			}
    		")
),
    'buttons' => array( $sfExtjs2Plugin->asVar ($btSaveEditeur))
));
// Create du formulaire de saisie des Editeurs
$private['creerFmSaisieEditeurs'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerFmSaisieEditeurs', 'source' => 'return '.$sfExtjs2Plugin->asVar($formEditeur))); 


// Création de l'action pour le bouton
$private['addTabListeEditeurs'] = $sfExtjs2Plugin->asMethod(array('name' => 'addTabListeEditeurs', 'source' => '
	gp = creerGpListeEditeurs();
	tabPanel.add({title: "Liste des éditeurs " ,
			id: "editeurListe",
            iconCls: "tabs",
            items: [gp],
            closable:false});	   
    dsEditeurs.load({params:{start: 0, limit: 8}, callback: function(){tabPanel.doLayout();}});
	')); 

// Création de l'action pour le bouton de sauvegarde des éditeurs
$private['saveSaisieEditeur'] = $sfExtjs2Plugin->asMethod(array('name' => 'saveSaisieEditeur', 'source' => '
		if (fm.getForm().isValid()) {
		fm.getForm().submit({
		url: "/frontend_dev.php/gereBD/UpdateEditeur",
		method: "POST",
		reset: false,
		waitMsg:"Saving...",
		    success: function(form, action) {
				obj = Ext.util.JSON.decode(action.response.responseText);
				var message = obj.msg.reason;		//on recherche le message que l\'on souhaite afficher
				Ext.MessageBox.alert("Enregistrement réussit", message);		//msgbox affichant le message de connexion, puis redirige l\'utilisateur s\'il clique sur ok        
				dsEditeurs.reload();
				tabPanel.remove(tabPanel.getActiveTab());
},
		    failure: function(form, action) {
		        switch (action.failureType) {
		            case Ext.form.Action.CLIENT_INVALID:
		                Ext.Msg.alert("Failure", "Form fields may not be submitted with invalid values");
		                break;
		            case Ext.form.Action.CONNECT_FAILURE:
		                Ext.Msg.alert("Failure", "Ajax communication failed");
		                break;
		            case Ext.form.Action.SERVER_INVALID:
		               Ext.Msg.alert("Failure", action.result.msg);
		       }
		    }
		});
}  else {
		               Ext.Msg.alert("INVALIDE", "Formulaire invalide");

}	
')); 

// Création de l'action pour la modification des éditeurs

$private['fnEditEditeur'] = $sfExtjs2Plugin->asMethod(array('parameters' => 'grid, rowIndex, e', 'name' => 'editEditeur',  'source' => '
var selections = grid.selModel.getSelections();
if (selections[0].json.proprietaire) {
	fm = creerFmSaisieEditeurs();
	cboPays = creerCboPays();
		                
	fm.add(cboPays);
    cboPays.store.load({params:{start: 0, limit: 8}, callback: function(){
		fm.getComponent("editeurId").setValue(selections[0].json.id); 
		fm.getComponent("editeurNom").setValue(selections[0].json.nom); 
		fm.getComponent("editeurAdresse1").setValue(selections[0].json.adresse1); 
		fm.getComponent("editeurAdresse2").setValue(selections[0].json.adresse2); 
		fm.getComponent("editeurCP").setValue(selections[0].json.cp); 
		fm.getComponent("editeurPhoto1").setValue(selections[0].json.photo1); 
		fm.getComponent("editeurPhoto2").setValue(selections[0].json.photo2); 
		fm.getComponent("editeurSite").setValue(selections[0].json.site); 
		fm.getComponent("editeurTel").setValue(selections[0].json.tel); 
		fm.getComponent("editeurVille").setValue(selections[0].json.ville); 
	 	fm.getComponent("paysCbo").setValue(selections[0].json.pays); 
		tabPanel.add({title: "Modification des éditeurs" ,
				id: "editeurSaisie",
	            iconCls: "tabs",
	            items: [fm],
	            closable:true});	   
	    tabPanel.setActiveTab("editeurSaisie");
	    tabPanel.doLayout();
    }});
 }
	')); 
// Création de l'action pour la création d'éditeur
$private['fnCreateEditeur'] = $sfExtjs2Plugin->asMethod(array( 'name' => 'createEditeur',  'source' => '
	fm = creerFmSaisieEditeurs();
	cboPays = creerCboPays();
	fm.add(cboPays);
	tabPanel.add({title: "Création d\'éditeur" ,
			id: "editeurSaisie",
            iconCls: "tabs",
            items: [fm],
            closable:true});	   
    tabPanel.setActiveTab("editeurSaisie");
    tabPanel.doLayout();
')); 

// création de la combo vrai/faux
$private['creerCboVF']  = $sfExtjs2Plugin->asMethod(array('name' => 'creerCboVF', 'parameters' => 'role', 'source' => "
			var cboVFTemplate = new Ext.XTemplate(
			'<tpl for=\".\"><div class=\"search-item\">',
				'<span style=\"font-size:13px; font-weight:bold;\"><span class=\"selectTitle\"><span>{search_nomVF}</span></span>',
			'</div></tpl>'
			);
			
			nom = role+'Cbo';
			cbo = new Ext.form.ComboBox({
				fieldLabel: role,
				id: nom,
				name: nom,
				style:'width:90%',
				store: new Ext.data.SimpleStore({
						fields: ['search_idVF', 'search_nomVF'],
						data : [['0','Non'],['1','Oui']]
					}),
				valueField:'search_idVF',
				displayField:'search_nomVF',
				hiddenName: role,
				typeAhead: false,
				triggerAction: 'all',
				mode:'local',
				selectOnFocus: true,
				allowBlank: false,
				loadingText: 'Chargement en cours',
				pageSize:5,
				minChars:0,
				itemSelector: 'div.search-item',
				tpl: cboVFTemplate,
				listeners: {
					select: updateCboVF
				}
});
		return cbo;
")); 
	
// Création de l'action pour la modification de la combo
$private['fnUpdateCboVF'] = $sfExtjs2Plugin->asMethod(array('parameters' => 'combo, record, index', 'name' => 'updateCboVF',  'source' => "
						combo.setValue(record.data.search_idVF);
						combo.collapse();
	")); 
//**********************************
// Formulaire de saisie d'auteur
//**********************************

$auteurId = $sfExtjs2Plugin->TextField(array
(
	'id' => 'auteurId',
	'fieldLabel' => 'Id',
	'name' => 'id'
));
$auteurCommentaire = $sfExtjs2Plugin->HtmlEditor(array
(
	'id' => 'auteurCommentaire',
	'fieldLabel' => 'Commentaire',
	'name' => 'commentaire',
	'width' => 400
));
$auteurDateNaissance = $sfExtjs2Plugin->DateField(array
(
	'id' => 'auteurDateNaissance',
	'fieldLabel' => 'Date de naissance',
	'name' => 'dateNaissance',
	'width' => 100,
	'format' => 'Y-m-d'
));
$auteurLieuNaissance = $sfExtjs2Plugin->TextField(array
(
	'id' => 'auteurLieuNaissance',
	'fieldLabel' => 'Lieu de naissance',
	'name' => 'lieuNaissance',
	'width' => 400
));

$auteurNom = $sfExtjs2Plugin->TextField(array
(
	'id' => 'auteurNom',
	'fieldLabel' => 'Nom',
	'name' => 'nom',
	'width' => 400
));
$auteurPrenom = $sfExtjs2Plugin->TextField(array
(
	'id' => 'auteurPrenom',
	'fieldLabel' => 'Prénom',
	'name' => 'prenom',
	'width' => 400
));
$auteurSurnom = $sfExtjs2Plugin->TextField(array
(
	'id' => 'auteurSurnom',
	'fieldLabel' => 'Surnom',
	'name' => 'surnom',
	'width' => 400
));
$auteurWeb1 = $sfExtjs2Plugin->TextField(array
(
	'id' => 'auteurWeb1',
	'fieldLabel' => 'Site web',
	'name' => 'web1',
	'width' => 400
));
$auteurWeb2 = $sfExtjs2Plugin->TextField(array
(
	'id' => 'auteurWeb2',
	'fieldLabel' => 'Site web',
	'name' => 'web2',
	'width' => 400
));


// Déclaration du formulaire de saisie des Auteurs
$formAuteur = $sfExtjs2Plugin->FormPanel(array
(
	'id'        	=> 'formAuteur',
    'title'       	=> 'Saisie des Auteurs',
	'fileUpload' => true,
	'frame' => true,
	'width' => 650,
	'autoHeight' => true,
    'items' 		=> array( 
$sfExtjs2Plugin->asVar ( $auteurId ), 
$sfExtjs2Plugin->asVar ( $auteurNom ), 
$sfExtjs2Plugin->asVar ( $auteurPrenom ),
$sfExtjs2Plugin->asVar ( $auteurSurnom ), 
$sfExtjs2Plugin->asVar ( $auteurCommentaire ), 
$sfExtjs2Plugin->asVar ( $auteurDateNaissance ), 
$sfExtjs2Plugin->asVar ( $auteurLieuNaissance ), 
$sfExtjs2Plugin->asVar ( $auteurWeb1 ), 
$sfExtjs2Plugin->asVar ( $auteurWeb2 ),
$sfExtjs2Plugin->asVar("
{
            xtype: 'fileuploadfield',
            id: 'auteurPhoto1',
            emptyText: 'Select an image',
            fieldLabel: 'Photo principale:',
            name: 'photo1',
            buttonText: 'Parourir...',
            buttonCfg: {
            	iconCls: 'upload-icon'
            }
			}
    		"),
$sfExtjs2Plugin->asVar("
{
            xtype: 'fileuploadfield',
            id: 'auteurPhoto2',
            emptyText: 'Select an image',
            fieldLabel: 'Photo autre:',
            name: 'photo2',
            buttonText: 'Parourir...',
            buttonCfg: {
            	iconCls: 'upload-icon'
            }
			}
    		")
),
    'buttons' => array( $sfExtjs2Plugin->asVar ($btSaveAuteur))
));
// Create du formulaire de saisie des Auteurs
$private['creerFmSaisieAuteurs'] = $sfExtjs2Plugin->asMethod(array('name' => 'creerFmSaisieAuteurs', 'source' => 'return '.$sfExtjs2Plugin->asVar($formAuteur))); 


// Création de l'action pour le bouton
$private['addTabListeAuteurs'] = $sfExtjs2Plugin->asMethod(array('name' => 'addTabListeAuteurs', 'source' => '
	gp = creerGpListeAuteurs();
	tabPanel.add({title: "Liste des auteurs " ,
			id: "auteurListe",
            iconCls: "tabs",
            items: [gp],
            closable:false});	   
    dsAuteurs.load({params:{start: 0, limit: 8}, callback: function(){tabPanel.doLayout();}});
	')); 

// Création de l'action pour le bouton de sauvegarde des auteurs
$private['saveSaisieAuteur'] = $sfExtjs2Plugin->asMethod(array('name' => 'saveSaisieAuteur', 'source' => '
		if (fmAuteur.getForm().isValid()) {
		fmAuteur.getForm().submit({
		url: "/frontend_dev.php/gereBD/UpdateAuteur",
		method: "POST",
		reset: false,
		waitMsg:"Saving...",
		    success: function(form, action) {
				obj = Ext.util.JSON.decode(action.response.responseText);
				var message = obj.msg.reason;		//on recherche le message que l\'on souhaite afficher
				Ext.MessageBox.alert("Enregistrement réussit", message);		//msgbox affichant le message de connexion, puis redirige l\'utilisateur s\'il clique sur ok        
				dsAuteurs.reload();
				tabPanel.remove(tabPanel.getActiveTab());
},
		    failure: function(form, action) {
		        switch (action.failureType) {
		            case Ext.form.Action.CLIENT_INVALID:
		                Ext.Msg.alert("Failure", "Form fields may not be submitted with invalid values");
		                break;
		            case Ext.form.Action.CONNECT_FAILURE:
		                Ext.Msg.alert("Failure", "Ajax communication failed");
		                break;
		            case Ext.form.Action.SERVER_INVALID:
		               Ext.Msg.alert("Failure", action.result.msg);
		       }
		    }
		});
}  else {
		               Ext.Msg.alert("INVALIDE", "Formulaire invalide");

}	
')); 

// Création de l'action pour la modification des auteurs

$private['fnEditAuteur'] = $sfExtjs2Plugin->asMethod(array('parameters' => 'grid, rowIndex, e', 'name' => 'editAuteur',  'source' => '
var selections = grid.selModel.getSelections();
if (selections[0].json.proprietaire) {
	fmAuteur = creerFmSaisieAuteurs();
	cboPays = creerCboPays();    
	fmAuteur.add(cboPays);
	cboScenariste = creerCboVF("scenariste");    
	fmAuteur.add(cboScenariste);
	cboDessinateur = creerCboVF("dessinateur");    
	fmAuteur.add(cboDessinateur);
	cboColoriste = creerCboVF("coloriste");    
	fmAuteur.add(cboColoriste);
	cboPays.store.load({params:{start: 0, limit: 8}, callback: function(){
		fmAuteur.getComponent("auteurId").setValue(selections[0].json.id); 
		fmAuteur.getComponent("auteurNom").setValue(selections[0].json.nom); 
		fmAuteur.getComponent("auteurPrenom").setValue(selections[0].json.prenom); 
		fmAuteur.getComponent("auteurSurnom").setValue(selections[0].json.surnom); 
		fmAuteur.getComponent("auteurCommentaire").setValue(selections[0].json.commentaire); 
		fmAuteur.getComponent("scenaristeCbo").setValue(selections[0].json.scenariste); 
		fmAuteur.getComponent("dessinateurCbo").setValue(selections[0].json.dessinateur); 
		fmAuteur.getComponent("coloristeCbo").setValue(selections[0].json.coloriste); 
		fmAuteur.getComponent("auteurDateNaissance").setValue(selections[0].json.dateNaissance); 
		fmAuteur.getComponent("auteurLieuNaissance").setValue(selections[0].json.lieuNaissance); 
		fmAuteur.getComponent("auteurPhoto1").setValue(selections[0].json.photo1); 
		fmAuteur.getComponent("auteurPhoto2").setValue(selections[0].json.photo2); 
		fmAuteur.getComponent("auteurWeb1").setValue(selections[0].json.web1); 
		fmAuteur.getComponent("auteurWeb2").setValue(selections[0].json.web2); 
		fmAuteur.getComponent("paysCbo").setValue(selections[0].json.pays); 
		tabPanel.add({title: "Modification des auteurs" ,
				id: "auteurSaisie",
	            iconCls: "tabs",
	            items: [fmAuteur],
	            closable:true});	   
	    tabPanel.setActiveTab("auteurSaisie");
	    tabPanel.doLayout();
    }});
}
	')); 
// Création de l'action pour la création d'auteur
$private['fnCreateAuteur'] = $sfExtjs2Plugin->asMethod(array( 'name' => 'createAuteur',  'source' => '
	fmAuteur = creerFmSaisieAuteurs();
	cboPays = creerCboPays();
	fmAuteur.add(cboPays);
	cboScenariste = creerCboVF("scenariste");    
	fmAuteur.add(cboScenariste);
	cboDessinateur = creerCboVF("dessinateur");    
	fmAuteur.add(cboDessinateur);
	cboColoriste = creerCboVF("coloriste");    
	fmAuteur.add(cboColoriste);
	tabPanel.add({title: "Création d\'auteurs" ,
			id: "auteurSaisie",
            iconCls: "tabs",
            items: [fmAuteur],
            closable:true});	   
    tabPanel.setActiveTab("auteurSaisie");
    tabPanel.doLayout();
')); 


//========================================================================
// Initialisation de la page
//========================================================================
$public ['init'] = $sfExtjs2Plugin->asMethod ( '
  Ext.QuickTips.init();
	gridPanel = creerGpListeBd();
    tabPanel.getItem("bdListe").add(gridPanel);
    addTabListeSeries();
    addTabListeEditeurs();
    addTabListeAuteurs();
    ds.load({params:{start: 0, limit: 8}, callback: function(){tabPanel.setActiveTab("bdListe");tabPanel.doLayout();}});

	' );

  $sfExtjs2Plugin->beginApplication ( array ('name' => 'App', 'private' => $private, 'public' => $public ) );
  $sfExtjs2Plugin->endApplication ();
  $sfExtjs2Plugin->initApplication('App');
  
  $sfExtjs2Plugin->end ();
?>
